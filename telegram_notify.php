<?php
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ cron –∫–∞–∂–¥—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç
 */

require_once 'config/settings.php';
require_once 'config/database.php';
require_once 'models/task.php';
require_once 'models/telegram_user.php';
require_once 'models/notification.php';
require_once 'config/tg_credentials.php';

$database = new Database();
$db = $database->getConnection();

$task = new Task($db);
$notification = new Notification($db);

$upcomingTasks = $task->getUpcomingTasksForNotification();

if ($upcomingTasks && $upcomingTasks->rowCount() > 0) {
    error_log("–ù–∞–π–¥–µ–Ω–æ " . $upcomingTasks->rowCount() . " –∑–∞–¥–∞—á –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
    while ($row = $upcomingTasks->fetch(PDO::FETCH_ASSOC)) {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        $chatId = $row['telegram_chat_id'];
        
        error_log("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ —Å ID: " . $row['id'] . " –≤ —á–∞—Ç ID: " . $chatId);
    
        $taskTime = date('H:i', strtotime($row['scheduled_date']));
        $minutesToStart = $row['notification_time'];
        
        $text = "üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ</b>\n\n";
        $text .= "üìå <b>{$row['title']}</b>\n";
        
        if (!empty($row['type_name'])) {
            $text .= "–¢–∏–ø: {$row['type_name']}\n";
        }
        
        if (!empty($row['location'])) {
            $text .= "–ú–µ—Å—Ç–æ: {$row['location']}\n";
        }
        
        $text .= "–í—Ä–µ–º—è: {$taskTime}\n";
        
        if ($minutesToStart == 60) {
            $text .= "–î–æ –Ω–∞—á–∞–ª–∞: 1 —á–∞—Å";
        } else if ($minutesToStart < 60) {
            $text .= "–î–æ –Ω–∞—á–∞–ª–∞: {$minutesToStart} –º–∏–Ω.";
        } else {
            $hours = floor($minutesToStart / 60);
            $minutes = $minutesToStart % 60;
            $text .= "–î–æ –Ω–∞—á–∞–ª–∞: {$hours} —á. {$minutes} –º–∏–Ω.";
        }
        
        error_log("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: " . $text);
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        if (sendTelegramMessage($chatId, $text)) {
            $notification->task_id = $row['id'];
            $notification->notification_type = 'telegram';
            $notification->sent_at = date('Y-m-d H:i:s');
            
            if ($notification->create()) {
                error_log("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –∑–∞–¥–∞—á–∏ ID " . $row['id']);
            } else {
                error_log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ ID " . $row['id']);
            }
            
            error_log("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–¥–∞—á–∏ ID {$row['id']} –≤ —á–∞—Ç ID {$chatId}");
        } else {
            error_log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ ID {$row['id']} –≤ —á–∞—Ç ID {$chatId}");
        }
    }
} else {
    error_log("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
    error_log("SQL –∑–∞–ø—Ä–æ—Å: " . $task->getLastQuery());
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –∏—Å–ø–æ–ª—å–∑—É—è cURL –≤–º–µ—Å—Ç–æ file_get_contents
 *
 * @param int $chatId ID —á–∞—Ç–∞
 * @param string $text –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @return bool –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
function sendTelegramMessage($chatId, $text) {
    $data = [
        'chat_id' => $chatId,
        'text' => $text,
        'parse_mode' => 'HTML'
    ];
    
    $url = 'https://api.telegram.org/bot' . TELEGRAM_BOT_TOKEN . '/sendMessage';
    
    error_log("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ URL: " . $url);
    error_log("–° –¥–∞–Ω–Ω—ã–º–∏: " . json_encode($data));
    
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
    curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
    
    // SSL –æ–ø—Ü–∏–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true); 
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);
    
    $response = curl_exec($ch);
    $error = curl_error($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    
    if ($error) {
        error_log("cURL Error: " . $error);
        curl_close($ch);
        return false;
    }
    
    error_log("–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ Telegram API: " . $httpCode);
    error_log("–û—Ç–≤–µ—Ç Telegram API: " . $response);
    
    curl_close($ch);
    
    $result = json_decode($response, true);
    
    return !empty($result['ok']) && $result['ok'] === true;
}
?>